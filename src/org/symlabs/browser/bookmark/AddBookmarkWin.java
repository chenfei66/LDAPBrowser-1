package org.symlabs.browser.bookmark;

import java.awt.event.WindowEvent;
import java.awt.event.WindowFocusListener;
import javax.swing.ToolTipManager;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;
import org.apache.log4j.Logger;
import org.symlabs.actions.bookmark.GoToBookmark;
import org.symlabs.bookmark.BookmarkNode;
import org.symlabs.bookmark.BookmarkBaseNode;
import org.symlabs.bookmark.BookmarkFolderNode;
import org.symlabs.browser.MessageDialog;
import org.symlabs.nodes.LDAPNode;
import org.symlabs.nodes.LDAPNodeTreeCellRenderer;
import org.symlabs.nodes.TreeRootNode;
import org.symlabs.util.Utils;

/**
 * <p>Titulo: BookmarkTreePanel </p>
 * <p>Descripcion: Panel that allows you to manage the bookmark  folders</p>
 * <p>Copyright: Emilio Fernandez  2009</p>
 * @author Emilio J. Fernandez Rey
 * @version 1.0
 * @id $Id: AddBookmarkWin.java,v 1.9 2009-08-24 09:01:06 efernandez Exp $
 */
public class AddBookmarkWin extends javax.swing.JFrame implements TreeSelectionListener {

    /**Attribute that contains the ldap node*/
    private LDAPNode ldapNode;
    /**Attribute that contains the bookmark base selected*/
    private BookmarkBaseNode bookmarkBaseSelected;
    /**Attribute that contains the root node of the bookmarks displayed*/
    private BookmarkFolderNode rootFolder;
    /**Attribute used to display the debug message*/
    private static Logger logger = Logger.getLogger(AddBookmarkWin.class);

    /** Creates new form BookmarkTreePanel */
    public AddBookmarkWin() {
        initComponents();
    }

    /** Creates new form BookmarkTreePanel
     * 
     * @param ldapNode
     * @param dnToAdd 
     */
    public AddBookmarkWin(LDAPNode ldapNode, String dnToAdd) {
        this.ldapNode = ldapNode;
        this.rootFolder = ((TreeRootNode) this.ldapNode.getRoot()).getLdapServer().getBookMarkRootFolder();
        initComponents();
        this.setSize(600, 380);
        this.bookmarkPanel.setLdapNode(this.ldapNode);
        this.bookmarkPanel.loadDnComboBoxValues(this.ldapNode);
        boolean editable= this.bookmarkPanel.getDnComboBox().isEditable();
        this.bookmarkPanel.getDnComboBox().setEditable(true);
        this.bookmarkPanel.getDnComboBox().setSelectedItem(dnToAdd);
        this.bookmarkPanel.getDnComboBox().setEditable(editable);

        //We set the tree model
        if (rootFolder != null) {
            DefaultTreeModel model = new DefaultTreeModel(rootFolder);
            this.tree.setModel(model);
        } else {
            logger.error("Empty bookmark tree");
        }

        //We set the tree renderer
        this.tree.setCellRenderer(new LDAPNodeTreeCellRenderer());

        //We set the tooltiptext
        ToolTipManager.sharedInstance().registerComponent(this.tree);

        //We have to update the tree
        this.tree.validate();
        this.tree.repaint();

        this.tree.addTreeSelectionListener(this);
        this.tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);

        //Sets selected the first row of the tree
        this.tree.setSelectionRow(0);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        commandPanel = new javax.swing.JPanel();
        manageFoldersButton = new javax.swing.JButton();
        addBookmarkButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        goToBookmarkButton = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        folderScrollPane = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        bookmarkPanel = new org.symlabs.browser.bookmark.BookmarkPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add Bookmark");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        commandPanel.setLayout(new java.awt.GridBagLayout());

        manageFoldersButton.setText("Manage Folders");
        manageFoldersButton.setToolTipText("Go to Manage Folder Window");
        manageFoldersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageFoldersButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        commandPanel.add(manageFoldersButton, gridBagConstraints);

        addBookmarkButton.setText("Add Bookmark");
        addBookmarkButton.setToolTipText("Add this Bookmark to the selected folder");
        addBookmarkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBookmarkButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        commandPanel.add(addBookmarkButton, gridBagConstraints);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        commandPanel.add(cancelButton, gridBagConstraints);

        goToBookmarkButton.setText("Go To Bookmark");
        goToBookmarkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goToBookmarkButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        commandPanel.add(goToBookmarkButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        getContentPane().add(commandPanel, gridBagConstraints);

        jSplitPane1.setDividerLocation(160);
        jSplitPane1.setDividerSize(4);

        folderScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Folders"));
        folderScrollPane.setViewportView(tree);

        jSplitPane1.setLeftComponent(folderScrollPane);

        bookmarkPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Bookmark Info"));
        jSplitPane1.setRightComponent(bookmarkPanel);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jSplitPane1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    private void manageFoldersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageFoldersButtonActionPerformed
        ManageBookmarkWin bookmarkWin = new ManageBookmarkWin(this.ldapNode);
        bookmarkWin.addWindowFocusListener(new WindowFocusListener() {

            public void windowGainedFocus(WindowEvent arg0) {
            }

            public void windowLostFocus(WindowEvent evt) {
                refreshFolders(rootFolder);
                logger.trace("Window focus lost " + evt.paramString());
            }
        });
        bookmarkWin.setLocationRelativeTo(this);
        bookmarkWin.setVisible(true);
}//GEN-LAST:event_manageFoldersButtonActionPerformed

    private void refreshFolders(BookmarkBaseNode base) {
        if (base == null) {
            base = this.rootFolder;
        }
        BookmarkBaseNode parent = null;
        if (base.getParent() == null) {
            parent = base;
        } else {
            parent = (BookmarkBaseNode) base.getParent();
        }
        //We have to update the tree
        ((DefaultTreeModel) this.tree.getModel()).nodeStructureChanged(parent);

        //We set selected the new node
        this.tree.setSelectionPath(new TreePath(base.getPath()));
    }

    private void addBookmarkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBookmarkButtonActionPerformed
        if (this.bookmarkBaseSelected != null && this.bookmarkBaseSelected instanceof BookmarkFolderNode) {
            BookmarkFolderNode folder = (BookmarkFolderNode) this.bookmarkBaseSelected;

            logger.trace("bookmark selected:" + bookmarkBaseSelected.getName());
            String dnSelected = (String) this.bookmarkPanel.getDnComboBox().getSelectedItem();
            if (!dnSelected.trim().equals("") && !this.bookmarkPanel.getNameTextField().getText().trim().equals("")) {
                if (folder.canCreateChild(this.bookmarkPanel.getNameTextField().getText())) {
                    //We add the new bookmark to the arraylist
                    BookmarkNode newBookmark = new BookmarkNode(
                            (String) this.bookmarkPanel.getDnComboBox().getSelectedItem(),
                            this.bookmarkPanel.getNameTextField().getText(),
                            this.bookmarkPanel.getDescriptionTextArea().getText());

                    folder.add(newBookmark);

                    this.refreshFolders(newBookmark);

                    this.setNeedToSave();

                    Utils.getMainWindow().refreshBookmarksMainWindow();

                    this.dispose();
                } else {
                    logger.trace("Name already exists.");
                    this.showNameAlreadyExistsMessage();
                }

            } else {
                String message = "Please fill the mandatory fields.";
                String details = "The followin field are mandatory: DN, Name.";
                String title = "Error Adding Bookmark";
                MessageDialog dialog = new MessageDialog(this,title, message, details, MessageDialog.MESSAGE_ERROR);
                dialog.setLocationRelativeTo(Utils.getMainWindow());
                dialog.setVisible(true);
            }
        } else {
            logger.error("Bookmark folder not found.");
            this.showFolderNotFoundMessage();
        }
    }//GEN-LAST:event_addBookmarkButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void goToBookmarkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goToBookmarkButtonActionPerformed
        if (!this.bookmarkPanel.getDnComboBox().getSelectedItem().equals("")) {
            if (this.bookmarkBaseSelected instanceof BookmarkNode) {
                this.dispose();
                BookmarkNode bookmarkNode = (BookmarkNode) this.bookmarkBaseSelected;
                (new GoToBookmark(Utils.getMainWindow().getCurrentBrowserPanel().getTreeRootNode(), bookmarkNode)).actionPerformed(evt);
            } else {
                String message = "You must select a bookmark.";
                String details = "You have selected a bookmark folder. Please select a bookmark to go to it.";
                String title = "Error Going to Bookmark";
                MessageDialog dialog = new MessageDialog(this,title, message, details, MessageDialog.MESSAGE_ERROR);
                dialog.setLocationRelativeTo(Utils.getMainWindow());
                dialog.setVisible(true);
            }
        } else {
            String message = "Please fill the mandatory fields.";
            String details = "The followin field are mandatory: DN, Name.";
            String title = "Error Adding Bookmark";
            MessageDialog dialog = new MessageDialog(this,title, message, details, MessageDialog.MESSAGE_ERROR);
            dialog.setLocationRelativeTo(Utils.getMainWindow());
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_goToBookmarkButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBookmarkButton;
    private org.symlabs.browser.bookmark.BookmarkPanel bookmarkPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel commandPanel;
    private javax.swing.JScrollPane folderScrollPane;
    private javax.swing.JButton goToBookmarkButton;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JButton manageFoldersButton;
    private javax.swing.JTree tree;
    // End of variables declaration//GEN-END:variables
    public void valueChanged(TreeSelectionEvent arg0) {
        Object node = (Object) this.tree.getLastSelectedPathComponent();
        if (node == null) {
            return;
        }
        if (node instanceof BookmarkFolderNode) {
            this.bookmarkBaseSelected = (BookmarkBaseNode) node;
//            this.loadBookmark(bookmarkBaseSelected);
            logger.trace("total child: " + this.bookmarkBaseSelected.getChildCount());
        } else {
            this.bookmarkBaseSelected = null;
        }
    }

    /**Method that loads the fields of the bookmarkbase given as argument in this panel
     * 
     * @param bookmarkBase BookmarkBaseNode
     */
    private void loadBookmark(BookmarkBaseNode bookmarkBase) {
        if (bookmarkBase instanceof BookmarkFolderNode) {
            this.bookmarkPanel.getDnComboBox().setVisible(false);
            this.bookmarkPanel.getDnLabel().setVisible(false);
        } else if (bookmarkBase instanceof BookmarkNode) {
            BookmarkNode bookmarkNode = (BookmarkNode) bookmarkBase;
            this.bookmarkPanel.getDnLabel().setVisible(true);
            this.bookmarkPanel.getDnComboBox().setVisible(true);
            boolean editable = this.bookmarkPanel.getDnComboBox().isEditable();
            this.bookmarkPanel.getDnComboBox().setEditable(true);
            this.bookmarkPanel.getDnComboBox().setSelectedItem(bookmarkNode.getDn());
            this.bookmarkPanel.getDnComboBox().setEditable(editable);
        }
        this.bookmarkPanel.getNameTextField().setText(bookmarkBase.getName());
        this.bookmarkPanel.getDescriptionTextArea().setText(bookmarkBase.getDescription());

        this.validate();
        this.repaint();
    }

    /**Method that shows an error message when no folder is selected
     * 
     */
    private void showFolderNotFoundMessage() {
        String message = "Folder not found.";
        String details = "Please select a bookmark folder to add a new bookmark or a new folder.";
        String title = "Error Adding Bookmark";
        MessageDialog dialog = new MessageDialog(this,title, message, details, MessageDialog.MESSAGE_ERROR);
        dialog.setLocationRelativeTo(Utils.getMainWindow());
        dialog.setVisible(true);
    }

    /**Method that saves the current selected tab
     * 
     */
    private void setNeedToSave() {
        ((TreeRootNode) this.ldapNode.getRoot()).getLdapServer().getConnectionData().setDirty(true);
    }

    /**Method that shows an error message when already exists a folder or a bookmark with the name written in the same folder.
     * 
     */
    private void showNameAlreadyExistsMessage() {
        String message = "The name selected already exists.";
        String details = "The name selected already exists. Please select an other name..";
        String title = "Error in Bookmark";
        MessageDialog dialog = new MessageDialog(this,title, message, details, MessageDialog.MESSAGE_ERROR);
        dialog.setLocationRelativeTo(Utils.getMainWindow());
        dialog.setVisible(true);
    }
}
