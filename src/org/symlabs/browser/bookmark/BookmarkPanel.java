package org.symlabs.browser.bookmark;

import java.awt.event.ItemEvent;
import java.util.Vector;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import netscape.ldap.LDAPException;
import netscape.ldap.LDAPSearchResults;
import org.apache.log4j.Logger;
import org.symlabs.browser.MessageDialog;
import org.symlabs.nodes.LDAPNode;
import org.symlabs.nodes.TreeRootNode;
import org.symlabs.util.Utils;

/**
 * <p>Titulo: BookmarkPanel </p>
 * <p>Descripcion: Panel that shows the bookmarks fields</p>
 * <p>Copyright: Emilio Fernandez  2009</p>
 * @author Emilio J. Fernandez Rey
 * @version 1.0
 * @id $Id: BookmarkPanel.java,v 1.3 2009-08-24 09:01:06 efernandez Exp $
 */
public class BookmarkPanel extends javax.swing.JPanel {

    /**Attribute used to display the debug message*/
    private static Logger logger = Logger.getLogger(BookmarkPanel.class);
    /**Attribute that contains the ldap node used to load the available dn of this connection*/
    private LDAPNode ldapNode;

    // <editor-fold defaultstate="collapsed" desc=" Getter and setter methods ">
    public JTextArea getDescriptionTextArea() {
        return descriptionTextArea;
    }

    public void setDescriptionTextArea(JTextArea descriptionTextArea) {
        this.descriptionTextArea = descriptionTextArea;
    }

    public JTextField getNameTextField() {
        return nameTextField;
    }

    public void setNameTextField(JTextField nameTextField) {
        this.nameTextField = nameTextField;
    }

    public JComboBox getDnComboBox() {
        return dnComboBox;
    }

    public void setDnComboBox(JComboBox dnComboBox) {
        this.dnComboBox = dnComboBox;
    }

    public LDAPNode getLdapNode() {
        return ldapNode;
    }

    public void setLdapNode(LDAPNode ldapNode) {
        this.ldapNode = ldapNode;
    }

    public JLabel getDnLabel() {
        return dnLabel;
    }    
    // </editor-fold>
    
    /** Creates new form BookmarkPanel */
    public BookmarkPanel() {
        initComponents();
    }

    /** Creates new form BookmarkPanel
     * @param node 
     * @param dn
     * @param name
     * @param description 
     */
    public BookmarkPanel(LDAPNode node, String dn, String name, String description) {
        initComponents();
        this.ldapNode = node;
        this.loadDnComboBoxValues(this.ldapNode);
        this.nameTextField.setText(name);
        this.descriptionTextArea.setText(description);
    }
    
    /**Method that loads the combobox values
     * 
     * @param node LDAPNode. It is used to get some dn nodes from the ldap server
     */
    public void loadDnComboBoxValues(LDAPNode node){
        TreeRootNode root = (TreeRootNode) node.getRoot();
        Vector<String> nodeNames = new Vector<String>();
        nodeNames = Utils.getAllFirstNodeNames(root, nodeNames);
        this.dnComboBox.setModel(new DefaultComboBoxModel(nodeNames));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        dnLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        nameLabel = new javax.swing.JLabel();
        descriptionScrollPane = new javax.swing.JScrollPane();
        descriptionTextArea = new javax.swing.JTextArea();
        dnComboBox = new javax.swing.JComboBox();

        setLayout(new java.awt.GridBagLayout());

        dnLabel.setText("DN");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        add(dnLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        add(nameTextField, gridBagConstraints);

        nameLabel.setText("Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        add(nameLabel, gridBagConstraints);

        descriptionScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Description"));

        descriptionTextArea.setColumns(20);
        descriptionTextArea.setRows(5);
        descriptionScrollPane.setViewportView(descriptionTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        add(descriptionScrollPane, gridBagConstraints);

        dnComboBox.setEditable(true);
        dnComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        dnComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                dnComboBoxItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        add(dnComboBox, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    private void dnComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_dnComboBoxItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            logger.trace("State: " + evt.getStateChange() + " Element:" + evt.getItem().toString());
            String selectedParentDn = (String) this.dnComboBox.getSelectedItem();
            if (!this.checkDnComboBox(selectedParentDn)) {
                selectedParentDn = this.ldapNode.myDN;
                this.dnComboBox.setSelectedItem(selectedParentDn);
            }
        }
    }//GEN-LAST:event_dnComboBoxItemStateChanged

    /**Method that checks the selected node dn. If the parent dn is not found then it is shown an error message.
     * 
     * @return boolean. True means that the parent dn is right, False means the parent dn is wrong
     */
    private boolean checkDnComboBox(String parentDn) {
        boolean valid = false;
        String errorMsg = "";
        String title = "";
        if (parentDn != null && !parentDn.trim().equals("")) {
            //We have to check if the selected parentDn exists
            try {
                LDAPSearchResults results = ((TreeRootNode) this.ldapNode.getRoot()).getLdapServer().getLdapOperation().getEntryBaseDN(parentDn);
                if (results != null && results.getCount() == 1) {
                    valid = true;
                    logger.trace("checking node Dn:" + parentDn);
                }
            } catch (LDAPException e) {
                errorMsg = "Error searching the dn node: " + parentDn + "," + e;
                logger.error(errorMsg);
                valid = false;
                title = "Error in node DN";
            }
        }
        if (!valid) {
            String message = "Error Searching the dn node selected.";
            MessageDialog errorDialog = new MessageDialog(this,title, message, errorMsg, MessageDialog.MESSAGE_ERROR);
            errorDialog.setLocationRelativeTo(Utils.getMainWindow());
            errorDialog.setVisible(true);
        }
        return valid;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane descriptionScrollPane;
    private javax.swing.JTextArea descriptionTextArea;
    private javax.swing.JComboBox dnComboBox;
    private javax.swing.JLabel dnLabel;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    // End of variables declaration//GEN-END:variables
}
