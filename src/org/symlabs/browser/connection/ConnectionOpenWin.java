package org.symlabs.browser.connection;

import java.util.Vector;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import org.apache.log4j.Logger;
import org.symlabs.actions.tab.NewTab;
import org.symlabs.browser.MessageDialog;
import org.symlabs.store.ConnectionData;
import org.symlabs.ui.SearchList;
import org.symlabs.util.Actions;
import org.symlabs.util.EvalParams;
import org.symlabs.util.LDAPServer;
import org.symlabs.util.Utils;

/**
 * <p>Titulo: OpenWin </p>
 * <p>Descripcion: Class which manages the configuration opening window. You can open a configuration previously saved</p>
 * <p>Copyright: Emilio Fernandez  2009</p>
 * @author Emilio J. Fernandez Rey
 * @version 1.0
 * @id $Id: ConnectionOpenWin.java,v 1.18 2009-08-26 11:23:56 efernandez Exp $
 */
public class ConnectionOpenWin extends javax.swing.JFrame {

    /**Attribute that contains the width of the main window screen*/
    public static final int Width = 500;
    /**Attribute that contains the height of the main window screen*/
    public static final int Height = 300;
    /**Attribute used to display the debug message*/
    private static Logger logger = Logger.getLogger(ConnectionOpenWin.class);
    /**Attribute that contains the default message in case of anyone configuration was found*/
    private static final String messageNoConfigurationFound = "<No one configuration was found>";

    /** Creates new form OpenWin
     * @throws java.lang.Exception 
     */
    public ConnectionOpenWin() throws Exception {
        initComponents();
        this.setSize(600, 300);
        //We set the window position
        this.setLocationRelativeTo(Utils.getMainWindow());
        initProperties();
        Utils.getMainWindow().setStatusBarMessage("Open an existing connection");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        connectionListScrollPane = new javax.swing.JScrollPane();
        connectionList = new SearchList();
        openLabel = new javax.swing.JLabel();
        commandPanel = new javax.swing.JPanel();
        openButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        newButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Open a configuration");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        connectionList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        connectionListScrollPane.setViewportView(connectionList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 8, 2, 8);
        getContentPane().add(connectionListScrollPane, gridBagConstraints);

        openLabel.setText("Select the configuration you want to open:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 8, 10, 8);
        getContentPane().add(openLabel, gridBagConstraints);

        commandPanel.setLayout(new java.awt.GridBagLayout());

        openButton.setText("Open");
        openButton.setToolTipText("Opens the selected connection");
        openButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 4, 10, 4);
        commandPanel.add(openButton, gridBagConstraints);

        cancelButton.setText("Cancel");
        cancelButton.setToolTipText("Closes this window");
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 4, 10, 4);
        commandPanel.add(cancelButton, gridBagConstraints);

        deleteButton.setText("Delete");
        deleteButton.setToolTipText("Removes the selected connection");
        deleteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 4, 10, 4);
        commandPanel.add(deleteButton, gridBagConstraints);

        editButton.setText("Edit");
        editButton.setToolTipText("Edits the selected connection");
        editButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 4, 10, 4);
        commandPanel.add(editButton, gridBagConstraints);

        newButton.setAction(Utils.getAction(NewTab.HashKey));
        newButton.setText("New...");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 4, 10, 4);
        commandPanel.add(newButton, gridBagConstraints);

        refreshButton.setText("Update");
        refreshButton.setToolTipText("Refreshes the configuration list");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 4, 10, 4);
        commandPanel.add(refreshButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 8, 2, 8);
        getContentPane().add(commandPanel, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void cancelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseClicked
        this.dispose();
        Utils.getMainWindow().clearStatusBarMessage();
    }//GEN-LAST:event_cancelButtonMouseClicked

    private void openButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openButtonMouseClicked
        String errorMessage = "";
        String errorTitle = "Connection Error";
        String message = "";
        try {
            String confName = null;
            //To avoid that there is not selected anyone configuration
            if (this.connectionList != null && this.connectionList.getSelectedValue() != null) {
                confName = this.connectionList.getSelectedValue().toString();

                //if the elemnt selected was this message it means that there is not anyone configuration so we can not open it
                if (!confName.equals(ConnectionOpenWin.messageNoConfigurationFound)) {
                    LDAPServer ldapServer = new LDAPServer(ConnectionData.loadData(confName),false);
                    this.dispose();

                    //Creates the new instance of LDAPServer in ldapServer. if there are any error in parameters an exception is thrown
                    errorMessage = EvalParams.evalConnectionParameters(ldapServer.getHost(), ldapServer.getPort() + "",
                            ldapServer.getUserId(), ldapServer.getUserPw().toCharArray(),
                            ldapServer.getSuffix(), ldapServer.getIndexLdapVersion());

                    if (errorMessage.equals("")) {
                        errorMessage = Utils.getMainWindow().addNewTab(
                                ldapServer.getHost(), 
                                ldapServer.getPort() + "",
                                ldapServer.getUserId(),
                                ldapServer.getUserPw().toCharArray(),
                                ldapServer.getSuffix(), 
                                ldapServer.getIndexLdapVersion(), 
                                ldapServer.getBookMarkRootFolder(),
                                ldapServer.getSearchRootFolder(),
                                confName,
                                Utils.ICON_CONNECT_OPEN
                                );
                    }
                } else {
                    errorMessage += "No one configuration was found" + "\n";
                    message = "No one configuration was found.";
                    errorTitle = "No configuration";
                    logger.info(errorMessage);
                }
            } else {//there is not selected a configuration
                errorMessage += "No one configuration is selected" + "\n";
                message = "No one configuration is selected.";
                errorTitle = "No configuration";
                logger.info(errorMessage);
            }

        } catch (Exception e) {
            errorMessage += "Error opening configuration. " + "\n" + e;
            message = "Error opening configuration.";
            logger.error(errorMessage);
        }

        if (!errorMessage.equals("")) {
            MessageDialog errorDialog = new MessageDialog(this,errorTitle, message, errorMessage, MessageDialog.MESSAGE_ERROR);
            errorDialog.setLocationRelativeTo(this);
            errorDialog.setVisible(true);
        }else{
            Actions.setEnabledActionsTab();
            Utils.getMainWindow().clearStatusBarMessage();
        }
    }//GEN-LAST:event_openButtonMouseClicked

    private void deleteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteButtonMouseClicked
        String confName = null;
        String title = "Delete Configuration";
        String message = "Are you sure you want to delete the selected configuration?\n";
        int answer = JOptionPane.showConfirmDialog(this, message, title, JOptionPane.WARNING_MESSAGE);
        if (answer == JOptionPane.YES_OPTION) {
            if (this.connectionList != null && this.connectionList.getSelectedValue() != null) {
                confName = this.connectionList.getSelectedValue().toString();
            }
            String errorMsg = "";
            title = "Connection Error";
            if (confName != null) {
                if (!confName.equals(ConnectionOpenWin.messageNoConfigurationFound)) {
                    try {
                        ConnectionData.removeConfNameFromConfigurationFile(confName);
                        this.setConnectionList();
                        message="Configuration removed succesfully.";
                    } catch (Exception e) {
                        errorMsg += "Error deleting configuration." + "\n" + e.getMessage();
                        message = "Error deleting configuration: " + confName;
                        logger.error(errorMsg);
                    }
                } else {
                    title = "No Configuration";
                    message = "This is not a configuration";
                    logger.info(message);
                }
            } else {//No one configuration has been selected
                title = "No Configuration";
                message = "No one configuration is selected";
                logger.info(message);
            }
            if (!message.equals("")) {
                if (errorMsg.equals("")) {
                    MessageDialog errorDialog = new MessageDialog(this,title, message, MessageDialog.MESSAGE_INFORMATION);
                    errorDialog.setLocationRelativeTo(this);
                    errorDialog.setVisible(true);
                } else {
                    MessageDialog errorDialog = new MessageDialog(this,title, message, errorMsg, MessageDialog.MESSAGE_ERROR);
                    errorDialog.setLocationRelativeTo(this);
                    errorDialog.setVisible(true);
                }
            }
        }
    }//GEN-LAST:event_deleteButtonMouseClicked

    private void editButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editButtonActionPerformed
        String errorMessage = "";
        String errorTitle = "Connection Error";
        String message = "";
        try {
            String confName = null;
            //To avoid that there is not selected anyone configuration
            if (this.connectionList != null && this.connectionList.getSelectedValue() != null) {
                confName = this.connectionList.getSelectedValue().toString();

                //if the elemnt selected was this message it means that there is not anyone configuration so we can not open it
                if (!confName.equals(ConnectionOpenWin.messageNoConfigurationFound)) {
                    ConnectionEditWin panel = new ConnectionEditWin(ConnectionData.loadData(confName),this);
                    panel.setSize(600, 500);
                    panel.setLocationRelativeTo(Utils.getMainWindow());
                    panel.setVisible(true);
                } else {
                    message = "No one configuration was found";
                    errorTitle = "No configuration";
                    logger.info(message);
                }
            } else {//there is not selected a configuration
                message = "No one configuration is selected";
                errorTitle = "No configuration";
                logger.info(message);
            }
        } catch (Exception e) {
            errorMessage += "Error opening configuration. " + "\n" + e;
            message = "Error opening configuration.";
            errorTitle = "Connection Error";
            logger.error(errorMessage);
        }
        if (!message.equals("")) {
            if (errorMessage.equals("")) {
                MessageDialog errorDialog = new MessageDialog(this,errorTitle, message, MessageDialog.MESSAGE_ERROR);
                errorDialog.setLocationRelativeTo(this);
                errorDialog.setVisible(true);
            } else {
                MessageDialog errorDialog = new MessageDialog(this,errorTitle, message, errorMessage, MessageDialog.MESSAGE_ERROR);
                errorDialog.setLocationRelativeTo(this);
                errorDialog.setVisible(true);
            }
        }
    }//GEN-LAST:event_editButtonActionPerformed

    private void newButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_newButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        this.initProperties();
    }//GEN-LAST:event_refreshButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel commandPanel;
    private javax.swing.JList connectionList;
    private javax.swing.JScrollPane connectionListScrollPane;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton editButton;
    private javax.swing.JButton newButton;
    private javax.swing.JButton openButton;
    private javax.swing.JLabel openLabel;
    private javax.swing.JButton refreshButton;
    // End of variables declaration//GEN-END:variables
    
    /**Method that refreshes the connection list
     * 
     */
    public void refreshConnectionList(){
        this.initProperties();
    }
    
    private void initProperties() {
        String errorMsg = "";
        String errorTitle = "Error Configuration File";
        String message = "";
        try {
            this.setConnectionList();
        } catch (Exception e) {
            errorMsg += e.getMessage() + "\n";
            message = "Connection Error";
            logger.error(errorMsg);
        }
        if (!errorMsg.endsWith("")) {
            MessageDialog errorDialog = new MessageDialog(this,errorTitle, message, errorMsg, MessageDialog.MESSAGE_ERROR);
            errorDialog.setLocationRelativeTo(this);
            errorDialog.setVisible(true);
        }
    }

    private void setConnectionList() throws Exception {
        String errorMsg = "";
        DefaultListModel model = null;
        try {
            Vector vConnectionNames = ConnectionData.getConnectionNames();
            if (vConnectionNames == null || vConnectionNames.size() == 0) {
                logger.info("No one configuration was found");
                model = new DefaultListModel();
                model.addElement(ConnectionOpenWin.messageNoConfigurationFound);
            } else {
                logger.trace("Total configurations detected: "+vConnectionNames.size());
                model = new DefaultListModel();
                for (int i = 0; i < vConnectionNames.size(); i++) {
                    model.addElement(vConnectionNames.elementAt(i));
                }
            }
            this.connectionList.setModel(model);
            if (model != null && model.size() > 0) {
                this.connectionList.setSelectedIndex(0);
            }
        } catch (Exception ex) {
            errorMsg = ex.getMessage();
            logger.error(errorMsg);
        }
    }
}
