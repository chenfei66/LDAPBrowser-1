package org.symlabs.browser.connection;

import javax.swing.DefaultComboBoxModel;
import org.apache.log4j.Logger;
import org.symlabs.browser.MessageDialog;
import org.symlabs.store.ConnectionData;
import org.symlabs.util.Actions;
import org.symlabs.util.EvalParams;
import org.symlabs.util.LDAPServer;
import org.symlabs.util.Utils;

/**
 * <p>Titulo: NewConnectionWin </p>
 * <p>Descripcion: Class which manages the connection window. This window displays a panel with the requiered parameters for the connection </p>
 * <p>Copyright: Emilio Fernandez  2009</p>
 * @author Emilio J. Fernandez Rey
 * @version 1.0
 * @id $Id: ConnectionNewWin.java,v 1.14 2009-08-26 11:23:56 efernandez Exp $
 */
public class ConnectionNewWin extends javax.swing.JFrame {

    /**Attribute used to display the debug message*/
    private static Logger logger = Logger.getLogger(ConnectionNewWin.class);
    /**Attribute that contains the name of this configuration name*/
    private String configurationName;

    /** Constructor: Creates a new instance of connection window.
     */
    public ConnectionNewWin() {
        initComponents();
        this.setSize(600, 300);
        //We set the window position
        this.setLocationRelativeTo(Utils.getMainWindow());
        this.initProperties();
        Utils.getMainWindow().setStatusBarMessage("Create a new LDAP connection");
    }

    /**Method which initializes the components of this class
     * 
     */
    private void initProperties() {
        if (connectionPanel.versionComboBox != null && connectionPanel.versionComboBox.getModel() != null) {
            connectionPanel.versionComboBox.setSelectedItem(LDAPServer.LDAP_DEFAULT_VERSION);
        }
        this.configurationName = null;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        connectionPanel = new org.symlabs.browser.connection.ConnectionPanel();
        this.connectionPanel.setComponent(this);
        testButton = new javax.swing.JButton();
        saveAsButton = new javax.swing.JButton();
        connectButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        openButton = new javax.swing.JButton();
        emptyPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create a new LDAP Connection");
        setBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setMinimumSize(new java.awt.Dimension(500, 300));
        getContentPane().setLayout(new java.awt.GridBagLayout());

        connectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Connection Parameters"));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        getContentPane().add(connectionPanel, gridBagConstraints);

        testButton.setText("Test");
        testButton.setToolTipText("Test this configuration");
        testButton.setMaximumSize(new java.awt.Dimension(90, 29));
        testButton.setMinimumSize(new java.awt.Dimension(90, 29));
        testButton.setPreferredSize(new java.awt.Dimension(90, 29));
        testButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                testButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 4, 2, 4);
        getContentPane().add(testButton, gridBagConstraints);

        saveAsButton.setText("Save as...");
        saveAsButton.setToolTipText("Save this configuration.");
        saveAsButton.setMaximumSize(new java.awt.Dimension(90, 29));
        saveAsButton.setMinimumSize(new java.awt.Dimension(90, 29));
        saveAsButton.setPreferredSize(new java.awt.Dimension(90, 29));
        saveAsButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveAsButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 4, 2, 4);
        getContentPane().add(saveAsButton, gridBagConstraints);

        connectButton.setText("Connect");
        connectButton.setToolTipText("Connect to the ldap server");
        connectButton.setMaximumSize(new java.awt.Dimension(90, 29));
        connectButton.setMinimumSize(new java.awt.Dimension(90, 29));
        connectButton.setPreferredSize(new java.awt.Dimension(90, 29));
        connectButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                connectButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 4, 2, 4);
        getContentPane().add(connectButton, gridBagConstraints);

        cancelButton.setText("Cancel");
        cancelButton.setToolTipText("Cancel these changes");
        cancelButton.setMaximumSize(new java.awt.Dimension(90, 29));
        cancelButton.setMinimumSize(new java.awt.Dimension(90, 29));
        cancelButton.setPreferredSize(new java.awt.Dimension(90, 29));
        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelButtonMouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(10, 4, 2, 4);
        getContentPane().add(cancelButton, gridBagConstraints);

        openButton.setAction(Utils.getAction(org.symlabs.actions.tab.OpenTab.HashKey));
        openButton.setText("Open...");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 4, 2, 4);
        getContentPane().add(openButton, gridBagConstraints);

        javax.swing.GroupLayout emptyPanelLayout = new javax.swing.GroupLayout(emptyPanel);
        emptyPanel.setLayout(emptyPanelLayout);
        emptyPanelLayout.setHorizontalGroup(
            emptyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        emptyPanelLayout.setVerticalGroup(
            emptyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        getContentPane().add(emptyPanel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    private void cancelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonMouseClicked
        this.dispose();
        Utils.getMainWindow().clearStatusBarMessage();
    }//GEN-LAST:event_cancelButtonMouseClicked

    private void testButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_testButtonMouseClicked
        String errorMessage = "";
        LDAPServer con = null;
        try {
            con = new LDAPServer(new ConnectionData(connectionPanel.hostTextField.getText(), Integer.parseInt(connectionPanel.portTextField.getText()),
                    connectionPanel.userIdTextField.getText(), new String(connectionPanel.userPwPasswordField.getPassword()),
                    connectionPanel.versionComboBox.getSelectedIndex()), true);
        } catch (Exception e) {
            errorMessage = e.getMessage();
            logger.error(errorMessage,e);
        }

        //If there are not any error found, we continue checking the fields
        if (errorMessage.equals("")) {
            String suffix = this.connectionPanel.getSuffixFromComboBox();
            try {
                con.TestConnection(suffix);
            } catch (Exception e) {
                errorMessage = e.getMessage();
                logger.error(errorMessage);
            }
        }
        String title = "";
        String message = "";
        if (!errorMessage.equals("")) {
            logger.error(errorMessage);
            title = "Connection error";
            message = "Error testing the connection parameters.";
            MessageDialog errorDialog = new MessageDialog(this,title, message, errorMessage, MessageDialog.MESSAGE_ERROR);
            errorDialog.setLocationRelativeTo(this);
            errorDialog.setVisible(true);
        } else {
            title = "Information message";
            message = "Test successfull!";
            logger.trace(errorMessage);
            MessageDialog errorDialog = new MessageDialog(this,title, message, MessageDialog.MESSAGE_INFORMATION);
            errorDialog.setLocationRelativeTo(this);
            errorDialog.setVisible(true);
        }
    }//GEN-LAST:event_testButtonMouseClicked

    private void connectButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_connectButtonMouseClicked
        this.dispose();
        String errorMessage = "";
        //Creates the new instance of LDAPServer in ldapServer. if there are any error in parameters an exception is thrown
        errorMessage = EvalParams.evalConnectionParameters(connectionPanel.hostTextField.getText(), connectionPanel.portTextField.getText(),
                connectionPanel.userIdTextField.getText(), connectionPanel.userPwPasswordField.getPassword(),
                this.connectionPanel.getSuffixFromComboBox(), connectionPanel.versionComboBox.getSelectedIndex());
        if (errorMessage.equals("")) {
            errorMessage = Utils.getMainWindow().addNewTab(
                    connectionPanel.hostTextField.getText(),
                    connectionPanel.portTextField.getText(),
                    connectionPanel.userIdTextField.getText(),
                    connectionPanel.userPwPasswordField.getPassword(),
                    this.connectionPanel.getSuffixFromComboBox(),
                    connectionPanel.versionComboBox.getSelectedIndex(),
                    null,//bookmark
                    null,//searches
                    this.configurationName,
                    Utils.ICON_CONNECT_NEW);
        }

        if (!errorMessage.equals("")) {
            errorMessage += "\n";
            String message = "Error trying to connect to ldap server: " + connectionPanel.hostTextField + ":" + connectionPanel.portTextField.getText();
            String title = "Connection Error";
            logger.error(errorMessage);
            MessageDialog errorDialog = new MessageDialog(this,title, message, errorMessage, MessageDialog.MESSAGE_ERROR);
            errorDialog.setLocationRelativeTo(this);
            errorDialog.setVisible(true);
        } else {
            Actions.setEnabledActionsTab();
            Utils.getMainWindow().clearStatusBarMessage();
        }
        
    }//GEN-LAST:event_connectButtonMouseClicked

    private void saveAsButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveAsButtonMouseClicked
        String errorMessage = "";
        String confName = "";
        String title = "";
        String message = "";
        int typeMessage = MessageDialog.MESSAGE_ERROR;
        try {
            DefaultComboBoxModel model = (DefaultComboBoxModel) this.connectionPanel.suffixesComboBox.getModel();
            String [] suffixes = new String[model.getSize()];
            for(int i=0;i<model.getSize();i++){
                suffixes[i] =(String) model.getElementAt(i);
            }
            ConnectionData data=
                    new ConnectionData(
                        connectionPanel.hostTextField.getText(),
                        Integer.parseInt(connectionPanel.portTextField.getText()),
                        connectionPanel.userIdTextField.getText(),
                        new String(connectionPanel.userPwPasswordField.getPassword()),
                        this.connectionPanel.getSuffixFromComboBox(),
                        suffixes,
                        connectionPanel.versionComboBox.getSelectedIndex(),
                        null,//bookmarks
                        null,//Searches
                        "",//the last parameter was the connection or configuration name
                        Utils.ICON_CONNECT_OPEN);
            //We save the configuration as confName in the configuration file
            confName = ConnectionData.saveAsConnectionData(data, this);
            if (!confName.equals(ConnectionData.OPERATION_CANCELLED)) {
                //We update the name of this configuration
                this.configurationName = confName;
            } else {
                title = "Operation cancelled";
                message = ConnectionData.OPERATION_CANCELLED + ".\n" + "Your configuration was not saved.";
                errorMessage=message;
                typeMessage = MessageDialog.MESSAGE_WARNING;
            }
        } catch (Exception e) {
            title = "Data error";
            errorMessage += e.getMessage() + "\n";
            message = "Error saving the configuration: " + connectionPanel.hostTextField + ":" + this.connectionPanel.portTextField.getText();
            logger.error(errorMessage);
        }
        if (!errorMessage.equals("")) {
            logger.error(errorMessage);
            MessageDialog errorDialog = new MessageDialog(this,title, message, typeMessage);
            errorDialog.setLocationRelativeTo(this);
            errorDialog.setVisible(true);
        }
    }//GEN-LAST:event_saveAsButtonMouseClicked

    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        logger.trace("Open a new connection, we close the new connection window.");
        this.dispose();
    }//GEN-LAST:event_openButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton connectButton;
    private org.symlabs.browser.connection.ConnectionPanel connectionPanel;
    private javax.swing.JPanel emptyPanel;
    private javax.swing.JButton openButton;
    private javax.swing.JButton saveAsButton;
    private javax.swing.JButton testButton;
    // End of variables declaration//GEN-END:variables
}
