package org.symlabs.browser.attribute;

import java.awt.Dimension;
import java.util.Collections;
import javax.swing.DefaultListModel;
import java.util.Vector;
import javax.swing.JList;
import org.apache.log4j.Logger;
import org.symlabs.ui.SearchList;
import org.symlabs.util.Utils;

/**
 * <p>Titulo: AttributeSelectorPanel </p>
 * <p>Descripcion: Panel that contains a list of attributes available and it allows you to add attributes to other list (attributes selected). </p>
 * <p>Copyright: Emilio Fernandez  2009</p>
 * @author Emilio J. Fernandez Rey
 * @version 1.0
 * @id $Id: AttributeSelectorPanel.java,v 1.7 2009-07-24 06:42:08 efernandez Exp $
 */
public class AttributeSelectorPanel extends javax.swing.JPanel{

    /**Attribute used to display the debug message*/
    private static Logger logger = Logger.getLogger(AttributeSelectorPanel.class);
    /**Interface used to detected the events when you click on addButton and removeButton*/
    private AttributeSelectorChangeI selectorChange;

    public void setSelectorChange(AttributeSelectorChangeI selectorChange) {
        this.selectorChange = selectorChange;
    }

    /**Contructor: Creates new form AttributeSelectorPanel
     * 
     */
    public AttributeSelectorPanel() {
        initComponents();
    }

    /** Constructor: Creates new form AttributeSelectorPanel
     * @param allAttributes Vector <String>. It contains the initial all available attributes
     * @param selectedAttributes Vector <String>. It contains the initial selected attributes
     */
    public AttributeSelectorPanel(Vector<String> allAttributes, Vector<String> selectedAttributes) {
        initComponents();
        this.initListValues(allAttributesList, allAttributes);
        this.initListValues(this.selectedAttributesList, selectedAttributes);
    }

    /**Method that sets the values of the Vector given as argument as the values of the myList
     * 
     * @param myList JList. This is the list where we want to set the values
     * @param vValues Vector<String> . This is the values to set in the JList.
     */
    private void initListValues(JList myList, Vector<String> vValues) {
        logger.trace("vValues.size:"+vValues.size());
        DefaultListModel model = new DefaultListModel();
        if (vValues != null) {
            Collections.sort(vValues);
            for (int i = 0; i < vValues.size(); i++) {
                model.addElement(vValues.elementAt(i));
            }
        }
        myList.setModel(model);
        logger.trace("Initialized list with " + vValues.size() + " elements.");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        selectedAttributesScrollPane = new javax.swing.JScrollPane();
        selectedAttributesList = new SearchList();
        removeAttributeButton = new javax.swing.JButton();
        allAttributeLabel = new javax.swing.JLabel();
        allAttributesScrollPane = new javax.swing.JScrollPane();
        allAttributesList = new SearchList();
        addAttributeButton = new javax.swing.JButton();
        selectedAttributesLabel = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        selectedAttributesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        selectedAttributesList.setToolTipText("Attributes selected");
        selectedAttributesScrollPane.setViewportView(selectedAttributesList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        add(selectedAttributesScrollPane, gridBagConstraints);

        removeAttributeButton.setText("<<");
        removeAttributeButton.setToolTipText("Removes the attribute selected");
        removeAttributeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAttributeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        add(removeAttributeButton, gridBagConstraints);

        allAttributeLabel.setText("Available");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        add(allAttributeLabel, gridBagConstraints);

        allAttributesList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        allAttributesList.setToolTipText("Available attributes");
        allAttributesScrollPane.setViewportView(allAttributesList);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        add(allAttributesScrollPane, gridBagConstraints);

        addAttributeButton.setText(">>");
        addAttributeButton.setToolTipText("Adds the attribute selected");
        addAttributeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAttributeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        add(addAttributeButton, gridBagConstraints);

        selectedAttributesLabel.setText("Selected");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(2, 4, 2, 4);
        add(selectedAttributesLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    private void removeAttributeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAttributeButtonActionPerformed
        Object[] attributeSelected = this.selectedAttributesList.getSelectedValues();
        if (attributeSelected != null && attributeSelected.length > 0) {
            for (int i = 0; i < attributeSelected.length; i++) {
                if (attributeSelected[i] != null && !attributeSelected[i].equals("")) {
                    //We add this element to the selected attribute list
                    DefaultListModel model = (DefaultListModel) this.allAttributesList.getModel();
                    model.addElement(attributeSelected[i]);

                    //We remove the selected attribute from the selected attributes list
                    model = (DefaultListModel) this.selectedAttributesList.getModel();
                    model.removeElement(attributeSelected[i]);
                }
            }
            this.resizeLists();
            if (this.selectorChange != null) {
                this.selectorChange.postRemoveElement(attributeSelected);
            }
        }
    }//GEN-LAST:event_removeAttributeButtonActionPerformed

    private void addAttributeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAttributeButtonActionPerformed
        Object[] attributeSelected = this.allAttributesList.getSelectedValues();
        if (attributeSelected != null && attributeSelected.length > 0) {
            for (int i = 0; i < attributeSelected.length; i++) {
                if (attributeSelected[i] != null && !attributeSelected[i].equals("")) {
                    //We add this element to the selected attributes list
                    DefaultListModel model = (DefaultListModel) this.selectedAttributesList.getModel();
                    model.addElement(attributeSelected[i]);

                    //We remove the selected attribute from the all attributes list
                    model = (DefaultListModel) this.allAttributesList.getModel();
                    model.removeElement(attributeSelected[i]);
                }
            }
            this.resizeLists();
            if (this.selectorChange != null) {
                this.selectorChange.postAddElement(attributeSelected);
            }
        }
    }//GEN-LAST:event_addAttributeButtonActionPerformed

    /**Method that returns a Vector with the attributes selected in this panel. This is the list displayed in the right side of the panel.
     * 
     * @return Vector <String>. This vector contains all attributes selected
     */
    public Vector<String> getAttributesSelected() {
        DefaultListModel model = (DefaultListModel) this.selectedAttributesList.getModel();
        logger.trace("Total attributes selected:" + model.size());
        Vector<String> vAttrSelected = new Vector();
        for (int i = 0; i < model.size(); i++) {
            vAttrSelected.addElement((String) model.getElementAt(i));
        }
        return vAttrSelected;
    }

    /**Method that returns a Vector with the all attributes shown in this panel. This is the list displayed in the left side of the panel.
     * 
     * @return Vector <String>. This vector contains all attributes
     */
    public Vector<String> getAttributesAll() {
        DefaultListModel model = (DefaultListModel) this.allAttributesList.getModel();
        //logger.trace("Total attributes selected:" + model.size());
        Vector<String> vAttrSelected = new Vector();
        for (int i = 0; i < model.size(); i++) {
            vAttrSelected.addElement((String) model.getElementAt(i));
        }
        return vAttrSelected;
    }

    /**Method that sets the all available attributes list.
     * 
     * @param vAllAttributes Vector. It contains the all available attributes
     */
    public void setAllAttributes(Vector<String> vAllAttributes) {
        logger.trace("We set attributes:"+vAllAttributes.size());
        this.initListValues(this.allAttributesList, vAllAttributes);
        this.resizeLists();
    }

    /**Method that sets the selected attributes list.
     * 
     * @param vSelectedAttributes Vector. It contains the selected attributes
     */
    public void setSelectedAttributes(Vector<String> vSelectedAttributes) {
        this.initListValues(this.selectedAttributesList, vSelectedAttributes);
        this.resizeLists();
    }

    /**Method that sets the all attributes, and the attributes selected from both list. 
     * And it is also removed from the first list (all attributes) the existing elements contained in the second list (selected attributes).
     * 
     * @param vAllAttributes Vector <String>
     * @param vSelectedAttributes Vector <String>
     */
    public void setAllAttributesAndSelectedAttributes(Vector<String> vAllAttributes, Vector<String> vSelectedAttributes) {
        //We get a vector without the existing elements in selected attributes
        Vector vNewAllAttr = Utils.getVectorRemovingValues(vAllAttributes, vSelectedAttributes);

        //We set the all attributes
        this.setAllAttributes(vNewAllAttr);
        //We set the selected attributes
        this.setSelectedAttributes(vSelectedAttributes);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addAttributeButton;
    public javax.swing.JLabel allAttributeLabel;
    private javax.swing.JList allAttributesList;
    private javax.swing.JScrollPane allAttributesScrollPane;
    private javax.swing.JButton removeAttributeButton;
    public javax.swing.JLabel selectedAttributesLabel;
    private javax.swing.JList selectedAttributesList;
    private javax.swing.JScrollPane selectedAttributesScrollPane;
    // End of variables declaration//GEN-END:variables
    /**Method that resizes both lists displayed.
     * 
     */
    private void resizeLists() {
        //We get the panel size
        Dimension panel = this.getPreferredSize();

        //We get the total value for the insets components displayed
        double totalInsets = this.allAttributesScrollPane.getInsets().left + this.allAttributesScrollPane.getInsets().right +
                this.addAttributeButton.getPreferredSize().width + this.addAttributeButton.getInsets().left + this.addAttributeButton.getInsets().right +
                this.selectedAttributesScrollPane.getInsets().left + this.selectedAttributesScrollPane.getInsets().right;

        //We substract from the panel width, the insets size
        double totalWidth = panel.getWidth() - totalInsets;

        //We calculate the values for aur lists
        int listWidth = (int) (totalWidth / 2);
        int listHeight = this.allAttributesList.getHeight();

        //We set their sizes
        this.allAttributesScrollPane.setPreferredSize(new Dimension(listWidth, listHeight));
        this.selectedAttributesScrollPane.setPreferredSize(new Dimension(listWidth, listHeight));
    }
}
